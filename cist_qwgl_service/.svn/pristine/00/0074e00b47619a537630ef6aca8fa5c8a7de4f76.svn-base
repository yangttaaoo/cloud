package com.cist.feedback.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.cist.feedback.model.DeptInfo;
import com.cist.feedback.model.QwCompanyAssessment;
import com.cist.feedback.service.FeedbackService;
import com.cist.frame.page.PageInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@RestController
@RequestMapping("feedback")
public class FeedbackController {
	@Autowired
	private FeedbackService service;

	/**
	 * 查询数据
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/list")
	public PageInfo<QwCompanyAssessment> selectData(@RequestBody HashMap<String, Object> map) {
		try {
			PageInfo page = new PageInfo();
			page.setPageNum(Integer.parseInt(map.get("currentPage").toString()));
			page.setPageSize(Integer.parseInt(map.get("pageSize").toString()));
			PageInfo<QwCompanyAssessment> info = (PageInfo<QwCompanyAssessment>) service.listpageList(map, page);
			return info;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 更新数据
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/update")
	public String update(@RequestBody HashMap<String, Object> map) {
		try {

			Integer update = service.update(map);
			if (update > 0) {
				return "{\"result\":\"更新成功\"}";
			} else {
				return "{\"result\":\"更新失败\"}";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 删除数据
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/delete")
	public String delete(@RequestBody HashMap<String, Object> map) {
		try {

			Integer delete = service.delete(map);
			if (delete > 0) {
				return "{\"result\":\"删除成功\"}";
			} else {
				return "{\"result\":\"删除失败\"}";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 保存数据
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/save")
	public String save(@RequestParam HashMap<String, Object> map,List<MultipartFile> files,HttpServletRequest request) {
		try {

			HttpSession session = request.getSession();
			Map<String,Object> userMap = (Map<String,Object>)session.getAttribute("userInfo"+session.getId());
			String userPk = userMap.get("sypi_pk")==null?null:userMap.get("sypi_pk").toString();
			map.put("fk_commit_person_id", userPk);//获取条件人pk
			Integer save = service.save(map,files);
			if (save > 0) {
				return "{\"result\":\"保存成功\"}";
			} else {
				return "{\"result\":\"保存失败\"}";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 管理部门树
	 * 
	 * @return
	 * @throws JsonProcessingException
	 */
	@RequestMapping("deptinfo")
	public String deptinfo() throws JsonProcessingException {
		// 顶级部门
		List<DeptInfo> departinfo = service.depart_infolist(null);
		ObjectMapper mapper = new ObjectMapper();
		List<DeptInfo> list = departinfodg(departinfo);
		String json = mapper.writeValueAsString(getdiwfdidian(list));
		return json.substring(1, json.length() - 1);
	}

	public List<HashMap<String, Object>> getdiwfdidian(List<DeptInfo> list) {
		List<HashMap<String, Object>> listmap = new ArrayList<HashMap<String, Object>>();
		for (DeptInfo depart_info : list) {
			HashMap<String, Object> map = new HashMap<String, Object>();
			map.put("title", depart_info.getName());
			map.put("key", depart_info.getDept_pk());

			map.put("selectable", depart_info.getSelectable());
			map.put("isLeaf", depart_info.getIsLeaf());
			if (null != depart_info.getChildren()) {// 下级
				// map.put("expanded", true);
				map.put("children", getdiwfdidian(depart_info.getChildren()));
				listmap.add(map);
			} else {
				listmap.add(map);
			}
		}
		return listmap;
	}

	public List<DeptInfo> departinfodg(List<DeptInfo> departinfo) {
		for (DeptInfo depart_info : departinfo) {
			// 部门
			List<DeptInfo> list = service.depart_infolist(depart_info.getDept_pk());
			if (list.size() != 0) {
				depart_info.setChildren(list);
				departinfodg(list);
			}
		}
		return departinfo;
	}

	/**
	 * 基础数据查询
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/selectBaseData")
	public HashMap<String, Object> selectBaseData(@RequestBody HashMap<String, Object> map) {
		try {
			map.put("fct_code", "QW01");
			map.put("zbList", service.selectBaseData(map));
			return map;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	/**
	 * 查询勤务考核反馈详情
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/selectResponse")
	public HashMap<String, Object> selectResponse(@RequestBody HashMap<String, Object> map) {
		try {
			map.put("resList", service.selectResponse(map));
			return map;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	/**
	 * 查询勤务考核对应的附件信息
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/selectPicList")
	public HashMap<String, Object> selectPicList(@RequestBody HashMap<String, Object> map) {
		try {
			map.put("picList", service.selectPicList(map));
			return map;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
}